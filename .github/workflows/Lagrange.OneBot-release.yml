name: Lagrange.OneBot Release

on:
  workflow_dispatch:

jobs:
  Build:
    runs-on: windows-latest

    strategy:
      matrix:
        runtimeIdentifier:
          [
            win-x64,
            win-x86,
            linux-x64,
            linux-arm,
            linux-arm64,
            linux-musl-x64,
            linux-musl-arm,
            linux-musl-arm64,
            osx-x64,
            osx-arm64,
          ]

    steps:
      - uses: actions/checkout@v4

      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Set secret
        env:
          MY_ENV_VAR: ${{ secrets.KEY }}
        run: |
          $envValue = $env:MY_ENV_VAR
          $content = Get-Content -Path 'Lagrange.OneBot\Utility\OneBotSigner.cs' -Raw
          $content = $content.Replace('$(SIGN_SERVER_DEFAULT)', $envValue)
          $content | Set-Content -Path 'Lagrange.OneBot\Utility\OneBotSigner.cs'

      - name: Build Lagrange.OneBot .NET 8.0
        shell: powershell
        run: dotnet publish Lagrange.OneBot/Lagrange.OneBot.csproj --self-contained -p:PublishSingleFile=true -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=none -p:RuntimeIdentifier=${{ matrix.runtimeIdentifier }} --framework net8.0

      - name: Upload binary files(${{ matrix.runtimeIdentifier }}) for .NET 8.0
        uses: actions/upload-artifact@v4
        with:
          name: Lagrange.OneBot_${{ matrix.runtimeIdentifier }}_8.0
          path: Lagrange.OneBot/bin/Release/net8.0/${{ matrix.runtimeIdentifier }}/publish

      - name: Compress files
        run: Compress-Archive -Path 'Lagrange.OneBot\bin\Release\net8.0\${{ matrix.runtimeIdentifier }}\publish\*' -DestinationPath 'Lagrange.OneBot_${{ matrix.runtimeIdentifier }}_8.0.zip'

      - name: dir
        run: dir 'Lagrange.OneBot\bin\Release\net8.0\${{ matrix.runtimeIdentifier }}\publish\'

      - name: Rename
        run: |
          mkdir upload
          copy 'Lagrange.OneBot_${{ matrix.runtimeIdentifier }}_8.0.zip' 'upload/Lagrange.OneBot_${{ matrix.runtimeIdentifier }}_8.0.zip'

      # - name: Rename
      #   if: matrix.runtimeIdentifier == 'win-x64' || matrix.runtimeIdentifier == 'win-x86'
      #   run: move 'Lagrange.OneBot\bin\Release\net8.0\${{ matrix.runtimeIdentifier }}\publish\Lagrange.OneBot.exe' 'Lagrange.OneBot\bin\Release\net8.0\${{ matrix.runtimeIdentifier }}\publish\Lagrange.OneBot_${{ matrix.runtimeIdentifier }}.exe'

      # - name: Rename
      #   if: matrix.runtimeIdentifier != 'win-x64' && matrix.runtimeIdentifier != 'win-x86'
      #   run: move 'Lagrange.OneBot\bin\Release\net8.0\${{ matrix.runtimeIdentifier }}\publish\Lagrange.OneBot' 'Lagrange.OneBot\bin\Release\net8.0\${{ matrix.runtimeIdentifier }}\publish\Lagrange.OneBot_${{ matrix.runtimeIdentifier }}'

      - uses: fy0/r2-upload-action@1.4
        continue-on-error: true
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET }}
          source-dir: upload
          destination-dir: ./lagrange/0.0.6/

      - name: Prepare release files
        uses: actions/upload-artifact@v4
        with:
          name: Lagrange.OneBot_all_${{ matrix.runtimeIdentifier }}_8.0
          path: Lagrange.OneBot_${{ matrix.runtimeIdentifier }}_8.0.zip

  Build-Android:
    runs-on: windows-latest

    strategy:
      matrix:
        runtimeIdentifier:
          [
            linux-bionic-x64,
            linux-bionic-arm64,
          ]

    steps:
      - uses: actions/checkout@v4

      - name: Install .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Build Lagrange.OneBot arm .NET 8.0
        shell: powershell
        run: |
          dotnet publish Lagrange.OneBot/Lagrange.OneBot.csproj --self-contained -p:PublishSingleFile=false -p:IncludeNativeLibrariesForSelfExtract=true -p:DebugType=none -p:RuntimeIdentifier=${{ matrix.runtimeIdentifier }} --framework net8.0

      - name: Copy Libraries
        run: Copy-Item -Path 'Vendors\${{ matrix.runtimeIdentifier }}\*' -Destination "Lagrange.OneBot\bin\Release\net8.0\${{ matrix.runtimeIdentifier }}\publish\" -Recurse -Force

      - name: dir
        run: dir 'Lagrange.OneBot\bin\Release\net8.0\${{ matrix.runtimeIdentifier }}\publish\'

      - name: Upload binary files(${{ matrix.runtimeIdentifier }}) for .NET 8.0
        uses: actions/upload-artifact@v4
        with:
          name: Lagrange.OneBot_${{ matrix.runtimeIdentifier }}_8.0
          path: Lagrange.OneBot/bin/Release/net8.0/${{ matrix.runtimeIdentifier }}/publish

      - name: Compress files
        run: Compress-Archive -Path 'Lagrange.OneBot\bin\Release\net8.0\${{ matrix.runtimeIdentifier }}\publish\*' -DestinationPath 'Lagrange.OneBot_${{ matrix.runtimeIdentifier }}_8.0.zip'

      - name: Rename
        if: matrix.runtimeIdentifier != 'win-x64' && matrix.runtimeIdentifier != 'win-x86'
        run: |
          mkdir upload
          copy 'Lagrange.OneBot_${{ matrix.runtimeIdentifier }}_8.0.zip' 'upload/Lagrange.OneBot_${{ matrix.runtimeIdentifier }}_8.0.zip'

      - uses: fy0/r2-upload-action@1.4
        continue-on-error: true
        with:
          r2-account-id: ${{ secrets.R2_ACCOUNT_ID }}
          r2-access-key-id: ${{ secrets.R2_ACCESS_KEY_ID }}
          r2-secret-access-key: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          r2-bucket: ${{ secrets.R2_BUCKET }}
          source-dir: upload
          destination-dir: ./lagrange/

      - name: Prepare release files
        uses: actions/upload-artifact@v4
        with:
          name: Lagrange.OneBot_all_${{ matrix.runtimeIdentifier }}_8.0
          path: Lagrange.OneBot_${{ matrix.runtimeIdentifier }}_8.0.zip

  NightlyRelease:
    name: Nightly Release
    runs-on: ubuntu-latest
    needs:
      - Build
      - Build-Android
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Update Nightly Tag
        run: |
          git tag -f nightly
          git push -f origin nightly
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: Lagrange.OneBot_all*
          path: ./bin
      - name: Update Nightly Release
        uses: ncipollo/release-action@v1
        with:
          tag: nightly
          name: "Nightly Release"
          prerelease: true
          body: "> ⚠️This is a nightly release.\n> ⚠️This is not the latest version."
          artifacts: |
            ./bin/*
          allowUpdates: true
          removeArtifacts: true

  ClearTempArtifacts:
    name: Clear Temp Artifacts
    if: always()
    runs-on: ubuntu-latest
    needs:
      - NightlyRelease
    permissions:
      actions: write
    steps:
      - uses: geekyeggo/delete-artifact@v2
        with:
          name: |
            Lagrange.OneBot_all*
